{"version":3,"sources":["pages/studentside/StudentLogin/Register.js"],"names":["StudentRegister","useContext","AuthContext","state","new_register","isAuthenticated","useState","newRegisterFormData","formData","setFormData","loading","setLoading","handleInputChange","e","target","name","value","toUpperCase","response","setResponse","handleSubmit","a","preventDefault","res","data","success","toast","error","message","console","to","style","background","className","backgroundImage","bglogin","width","backgroundSize","overflow","maxWidth","color","fontWeight","fontSize","icon","faInfoCircle","href","textAlign","onSubmit","inputFields","map","input","index","type","xs","key","label","Group","Label","Control","required","onChange","Select","options","option","disabled","includes","borderRadius","display"],"mappings":"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","file":"static/js/15.5f98bc3e.chunk.js","sourcesContent":["import { Button, Col, Form } from \"@themesberg/react-bootstrap\";\nimport React, { useContext, useState } from \"react\";\nimport toast, { Toaster } from \"react-hot-toast\";\nimport { AuthContext } from \"../../../context/AuthContext\";\nimport bglogin from \"../../../assets/img/register_bg_2.png\";\nimport { Link, Redirect } from \"react-router-dom\";\nimport \"../../../css/RegisterForm.css\";\nimport { faInfoCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport { inputFields, newRegisterFormData } from \"../../../constants\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nconst StudentRegister = () => {\n    const { state, new_register } = useContext(AuthContext);\n    const { isAuthenticated } = state;\n\n    const [formData, setFormData] = useState(newRegisterFormData);\n\n    const [loading, setLoading] = useState(false);\n\n    const handleInputChange = (e) => {\n        const { name, value } = e.target;\n\n        if (name === \"roll_no\" || name === \"blood_group\") {\n            setFormData({\n                ...formData,\n                [name]: value.toUpperCase()\n            })\n            return;\n        }\n\n        setFormData({\n            ...formData,\n            [name]: value\n        })\n\n    }\n\n    const [response, setResponse] = useState(null);\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n\n        try {\n            setLoading(true);\n            setResponse(null);\n            const res = await new_register(formData);\n            if (res.data.success) {\n                toast.success(\"Data saved successfully for verification. You will receive a mail once your data is verified.\");\n                setResponse(\"Data saved successfully for verification. You will receive a mail once your data is verified.\");\n                setFormData(newRegisterFormData);\n            }\n            else {\n                toast.error(res.data.message);\n                setResponse(res.data.message);\n            }\n            setLoading(false);\n        } catch (error) {\n            console.error('Error:', error.response ? error.response.data : error.message);\n            toast.error(\"Some error occured\");\n            setLoading(false);\n            setResponse('Error');\n        }\n    };\n\n    if (isAuthenticated) {\n        return <Redirect to=\"/\" />;\n    }\n\n    return (\n        <div style={{ background: \"#262b40\" }}>\n            <Toaster />\n            <div\n                className=\"d-flex justify-content-center registerContainer px-4 align-items-center\"\n                style={{\n                    backgroundImage: `url(${bglogin})`,\n                    width: \"100%\",\n                    backgroundSize: \"cover\",\n                    background: \"fixed\",\n                    overflow: \"scroll\",\n                }}\n            >\n                <div style={{ overflow: \"scroll\", maxWidth: \"100%\", width: \"100%\", color: \"orange\" }} className=\"registerForm\">\n                    <div className=\"d-flex justify-items-center gap-2 mb-2\" style={{ width: '100%', fontWeight: '600', fontSize: '18px' }} >\n                        <span><FontAwesomeIcon icon={faInfoCircle} /></span>\n                        <div>\n                            Please ensure you input your information accurately into the form. Verify all details prior to submission, as you have a single opportunity to complete this form.\n                        </div>\n                    </div>\n                    <div className=\"d-flex justify-items-center gap-2 mb-5\" style={{ width: '100%', fontWeight: '600', fontSize: '18px' }} >\n                        <span><FontAwesomeIcon icon={faInfoCircle} /></span>\n                        <div>\n                            Incase of any query: <a href=\"mailto:placementsin@nsut.ac.in\" style={{color: 'blue'}}>placementsin@nsut.ac.in</a>\n                        </div>\n                    </div>\n                    <h2 style={{ color: \"darkorange\", textAlign: \"center\" }}>Register</h2>\n                    <Form onSubmit={handleSubmit} className=\"form w-full\">\n                        {inputFields.map((input, index) => {\n                            if (input.type === 'text' || input.type === 'email' || input.type === 'number') {\n                                return <Col xs={5} className=\"mt-3 registerInput\" key={input.label + index + input.type} >\n                                    <Form.Group>\n                                        <Form.Label>{input.label}</Form.Label>\n                                        <Form.Control\n                                            type={input.type}\n                                            required\n                                            name={input.name}\n                                            value={formData[input.name]}\n                                            onChange={handleInputChange}\n                                            {...input}\n                                        />\n                                    </Form.Group>\n                                </Col>\n                            }\n                            else if (input.type === \"select\") {\n                                return <Form.Group className=\"mt-3\" key={input.label + index + input.type}>\n                                    <Form.Label>{input.label}</Form.Label>\n                                    <Form.Select name={input.name} onChange={handleInputChange} required>\n                                        {input.options.map((option, index) => <option key={option.name + index} value={option.value}>{option.name}</option>)}\n                                    </Form.Select>\n                                </Form.Group>\n                            }\n                            else if (input.type === \"date\") {\n                                return <Col xs={5} className=\"mt-3 registerInput\" key={input.label + index + input.type} >\n                                    <Form.Group>\n                                        <Form.Label>{input.label}</Form.Label>\n                                        <Form.Control\n                                            type={input.type}\n                                            required\n                                            name={input.name}\n                                            value={formData[input.name]}\n                                            onChange={handleInputChange}\n                                            {...input}\n                                        />\n                                    </Form.Group>\n                                </Col>\n                            }\n                            else return null;\n                        })}\n                        <div className=\"mt-5 registerButton\">\n                            <Button\n                                style={{\n                                    width: \"100%\",\n                                    background: \"linear-gradient(to right, #fb7b4a, #ee3344)\",\n                                }}\n                                disabled={loading}\n                                type=\"submit\"\n                            >\n                                Register\n                            </Button>\n                            {response && <div className=\"mt-1\" style={{ color: response.includes('successfully') ? 'green' : 'red', width: '100%', textAlign: 'center', fontWeight: 'bold', fontSize: '20px' }}>\n                                {response}\n                            </div>}\n                        </div>\n                        <div className=\"text-center w-100\">\n                            or\n                        </div>\n                        <div className=\"mt-2 p-2 text-white text-center registerButton\" style={{\n                            borderRadius: \"8px\",\n                            background: \"linear-gradient(to right, #fb7b4a, #ee3344)\",\n                        }}>\n                            <Link\n                                to={'/login'}\n                                className=\"text-white text-center\"\n                                style={{\n                                    width: \"100%\",\n                                    display: 'block'\n                                }}>\n                                Login\n                            </Link>\n                        </div>\n                    </Form>\n                </div>\n            </div>\n        </div>\n    );\n};\nexport default StudentRegister;\n"],"sourceRoot":""}