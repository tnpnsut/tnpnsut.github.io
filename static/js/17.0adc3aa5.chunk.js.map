{"version":3,"sources":["pages/ResetPassword.js"],"names":["ResetPassword","params","useLocation","newPassword","setNewPassword","useState","confirmedNewPassword","setConfirmedNewPassword","error","setError","status","message","history","useHistory","React","createElement","style","background","className","height","width","backgroundSize","maxWidth","color","Form","onSubmit","async","e","preventDefault","axiosInstance","post","code","search","split","password","passwordConfirmation","push","err","response","data","messages","Row","Col","xs","Group","Label","Control","type","required","value","onChange","target","Button","GlobalToast","variant"],"mappings":"6GAAA,mFAyFeA,UAnFOA,KACpB,MAAMC,EAASC,eACRC,EAAaC,GAAkBC,mBAAS,KACxCC,EAAsBC,GAA2BF,mBAAS,KAC1DG,EAAOC,GAAYJ,mBAAS,CACjCK,QAAQ,EACRC,QAAS,KAELC,EAAUC,cAmBhB,OACEC,IAAAC,cAAA,OAAKC,MAAO,CAAEC,WAAY,YACxBH,IAAAC,cAAA,OACEG,UAAU,wDACVF,MAAO,CAAEG,OAAQ,QAASC,MAAO,QAASC,eAAgB,UAE1DP,IAAAC,cAAA,OAAKC,MAAO,CAAEI,MAAO,QAASE,SAAU,OAAQC,MAAO,WACrDT,IAAAC,cAAA,MAAIC,MAAO,CAAEO,MAAO,eAAgB,kBACpCT,IAAAC,cAACS,IAAI,CAACC,SA1BOC,UACnBC,EAAEC,iBACF,UACQC,IAAcC,KAAK,uBAAwB,CAC/CC,KAAM9B,EAAO+B,OAAOC,MAAM,KAAK,GAC/BC,SAAU/B,EACVgC,qBAAsB7B,IAExBM,EAAQwB,KAAK,UACb,MAAO5B,GACP,MAAM6B,EAAM,CACV3B,QAAQ,EACRC,QAASH,EAAM8B,SAASC,KAAK5B,QAAQ,GAAG6B,SAAS,GAAG7B,SAEtDF,EAAS4B,KAYyBnB,UAAU,QACtCJ,IAAAC,cAAC0B,IAAG,KACF3B,IAAAC,cAAC2B,IAAG,CAACC,GAAI,IACP7B,IAAAC,cAACS,IAAKoB,MAAK,KACT9B,IAAAC,cAACS,IAAKqB,MAAK,KAAC,gBACZ/B,IAAAC,cAACS,IAAKsB,QAAO,CACXC,KAAK,WACLC,UAAQ,EACRC,MAAO9C,EACP+C,SAAWvB,GAAMvB,EAAeuB,EAAEwB,OAAOF,YAKjDnC,IAAAC,cAAC0B,IAAG,CAACvB,UAAU,QACbJ,IAAAC,cAAC2B,IAAG,CAACC,GAAI,IACP7B,IAAAC,cAACS,IAAKoB,MAAK,KACT9B,IAAAC,cAACS,IAAKqB,MAAK,KAAC,wBACZ/B,IAAAC,cAACS,IAAKsB,QAAO,CACXC,KAAK,WACLC,UAAQ,EACRC,MAAO3C,EACP4C,SAAWvB,GAAMpB,EAAwBoB,EAAEwB,OAAOF,YAK1DnC,IAAAC,cAAC0B,IAAG,CAACvB,UAAU,QACbJ,IAAAC,cAAC2B,IAAG,CAACC,GAAI,IACP7B,IAAAC,cAACqC,IAAM,CACLpC,MAAO,CACLI,MAAO,OACPH,WAAY,+CAEd8B,KAAK,UACN,uBAQVvC,EAAME,QAAUI,IAAAC,cAACsC,IAAW,CAACC,QAAQ,SAAS3C,QAASH,EAAMG","file":"static/js/17.0adc3aa5.chunk.js","sourcesContent":["import { Button, Col, Form, Row } from \"@themesberg/react-bootstrap\";\nimport React, { useState } from \"react\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport axiosInstance from \"../axiosConfig\";\nimport GlobalToast from \"../components/GlobalNotification/GlobalNotification\";\n\nconst ResetPassword = () => {\n  const params = useLocation();\n  const [newPassword, setNewPassword] = useState(\"\");\n  const [confirmedNewPassword, setConfirmedNewPassword] = useState(\"\");\n  const [error, setError] = useState({\n    status: false,\n    message: \"\",\n  });\n  const history = useHistory();\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      await axiosInstance.post(\"/auth/reset-password\", {\n        code: params.search.split(\"=\")[1], // code contained in the reset link of step 3.\n        password: newPassword,\n        passwordConfirmation: confirmedNewPassword,\n      });\n      history.push(\"/login\");\n    } catch (error) {\n      const err = {\n        status: true,\n        message: error.response.data.message[0].messages[0].message,\n      };\n      setError(err);\n    }\n  };\n\n  return (\n    <div style={{ background: \"#262b40\" }}>\n      <div\n        className=\"d-flex justify-content-center px-2 align-items-center\"\n        style={{ height: \"100vh\", width: \"100vw\", backgroundSize: \"cover\" }}\n      >\n        <div style={{ width: \"400px\", maxWidth: \"100%\", color: \"orange\" }}>\n          <h2 style={{ color: \"darkorange\" }}>Reset Password</h2>\n          <Form onSubmit={handleSubmit} className=\"mt-3\">\n            <Row>\n              <Col xs={12}>\n                <Form.Group>\n                  <Form.Label>New Password</Form.Label>\n                  <Form.Control\n                    type=\"password\"\n                    required\n                    value={newPassword}\n                    onChange={(e) => setNewPassword(e.target.value)}\n                  />\n                </Form.Group>\n              </Col>\n            </Row>\n            <Row className=\"mt-3\">\n              <Col xs={12}>\n                <Form.Group>\n                  <Form.Label>Confirm New Password</Form.Label>\n                  <Form.Control\n                    type=\"password\"\n                    required\n                    value={confirmedNewPassword}\n                    onChange={(e) => setConfirmedNewPassword(e.target.value)}\n                  />\n                </Form.Group>\n              </Col>\n            </Row>\n            <Row className=\"mt-5\">\n              <Col xs={12}>\n                <Button\n                  style={{\n                    width: \"100%\",\n                    background: \"linear-gradient(to right, #fb7b4a, #ee3344)\",\n                  }}\n                  type=\"submit\"\n                >\n                  Reset Password\n                </Button>\n              </Col>\n            </Row>\n          </Form>\n        </div>\n      </div>\n      {error.status && <GlobalToast variant=\"danger\" message={error.message} />}\n    </div>\n  );\n};\n\nexport default ResetPassword;\n"],"sourceRoot":""}