{"version":3,"sources":["pages/ResetPassword.js"],"names":["ResetPassword","params","useLocation","useState","newPassword","setNewPassword","confirmedNewPassword","setConfirmedNewPassword","status","message","error","setError","history","useHistory","handleSubmit","e","a","preventDefault","axiosInstance","post","code","search","split","password","passwordConfirmation","push","err","response","data","messages","style","background","className","height","width","backgroundSize","maxWidth","color","onSubmit","xs","Group","Label","Control","type","required","value","onChange","target","variant"],"mappings":"mOAyFeA,UAnFO,WACpB,IAAMC,EAASC,cACf,EAAsCC,mBAAS,IAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAAwDF,mBAAS,IAAjE,mBAAOG,EAAP,KAA6BC,EAA7B,KACA,EAA0BJ,mBAAS,CACjCK,QAAQ,EACRC,QAAS,KAFX,mBAAOC,EAAP,KAAcC,EAAd,KAIMC,EAAUC,cACVC,EAAY,uCAAG,WAAOC,GAAP,eAAAC,EAAA,6DACnBD,EAAEE,iBADiB,kBAGXC,IAAcC,KAAK,uBAAwB,CAC/CC,KAAMnB,EAAOoB,OAAOC,MAAM,KAAK,GAC/BC,SAAUnB,EACVoB,qBAAsBlB,IANP,OAQjBM,EAAQa,KAAK,UARI,gDAUXC,EAAM,CACVlB,QAAQ,EACRC,QAAS,KAAMkB,SAASC,KAAKnB,QAAQ,GAAGoB,SAAS,GAAGpB,SAEtDE,EAASe,GAdQ,yDAAH,sDAkBlB,OACE,yBAAKI,MAAO,CAAEC,WAAY,YACxB,yBACEC,UAAU,wDACVF,MAAO,CAAEG,OAAQ,QAASC,MAAO,QAASC,eAAgB,UAE1D,yBAAKL,MAAO,CAAEI,MAAO,QAASE,SAAU,OAAQC,MAAO,WACrD,wBAAIP,MAAO,CAAEO,MAAO,eAApB,kBACA,kBAAC,IAAD,CAAMC,SAAUxB,EAAckB,UAAU,QACtC,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKO,GAAI,IACP,kBAAC,IAAKC,MAAN,KACE,kBAAC,IAAKC,MAAN,qBACA,kBAAC,IAAKC,QAAN,CACEC,KAAK,WACLC,UAAQ,EACRC,MAAOzC,EACP0C,SAAU,SAAC/B,GAAD,OAAOV,EAAeU,EAAEgC,OAAOF,aAKjD,kBAAC,IAAD,CAAKb,UAAU,QACb,kBAAC,IAAD,CAAKO,GAAI,IACP,kBAAC,IAAKC,MAAN,KACE,kBAAC,IAAKC,MAAN,6BACA,kBAAC,IAAKC,QAAN,CACEC,KAAK,WACLC,UAAQ,EACRC,MAAOvC,EACPwC,SAAU,SAAC/B,GAAD,OAAOR,EAAwBQ,EAAEgC,OAAOF,aAK1D,kBAAC,IAAD,CAAKb,UAAU,QACb,kBAAC,IAAD,CAAKO,GAAI,IACP,kBAAC,IAAD,CACET,MAAO,CACLI,MAAO,OACPH,WAAY,+CAEdY,KAAK,UALP,uBAcTjC,EAAMF,QAAU,kBAAC,IAAD,CAAawC,QAAQ,SAASvC,QAASC,EAAMD","file":"static/js/21.a9ce355d.chunk.js","sourcesContent":["import { Button, Col, Form, Row } from \"@themesberg/react-bootstrap\";\nimport React, { useState } from \"react\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport axiosInstance from \"../axiosConfig\";\nimport GlobalToast from \"../components/GlobalNotification/GlobalNotification\";\n\nconst ResetPassword = () => {\n  const params = useLocation();\n  const [newPassword, setNewPassword] = useState(\"\");\n  const [confirmedNewPassword, setConfirmedNewPassword] = useState(\"\");\n  const [error, setError] = useState({\n    status: false,\n    message: \"\",\n  });\n  const history = useHistory();\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      await axiosInstance.post(\"/auth/reset-password\", {\n        code: params.search.split(\"=\")[1], // code contained in the reset link of step 3.\n        password: newPassword,\n        passwordConfirmation: confirmedNewPassword,\n      });\n      history.push(\"/login\");\n    } catch (error) {\n      const err = {\n        status: true,\n        message: error.response.data.message[0].messages[0].message,\n      };\n      setError(err);\n    }\n  };\n\n  return (\n    <div style={{ background: \"#262b40\" }}>\n      <div\n        className=\"d-flex justify-content-center px-2 align-items-center\"\n        style={{ height: \"100vh\", width: \"100vw\", backgroundSize: \"cover\" }}\n      >\n        <div style={{ width: \"400px\", maxWidth: \"100%\", color: \"orange\" }}>\n          <h2 style={{ color: \"darkorange\" }}>Reset Password</h2>\n          <Form onSubmit={handleSubmit} className=\"mt-3\">\n            <Row>\n              <Col xs={12}>\n                <Form.Group>\n                  <Form.Label>New Password</Form.Label>\n                  <Form.Control\n                    type=\"password\"\n                    required\n                    value={newPassword}\n                    onChange={(e) => setNewPassword(e.target.value)}\n                  />\n                </Form.Group>\n              </Col>\n            </Row>\n            <Row className=\"mt-3\">\n              <Col xs={12}>\n                <Form.Group>\n                  <Form.Label>Confirm New Password</Form.Label>\n                  <Form.Control\n                    type=\"password\"\n                    required\n                    value={confirmedNewPassword}\n                    onChange={(e) => setConfirmedNewPassword(e.target.value)}\n                  />\n                </Form.Group>\n              </Col>\n            </Row>\n            <Row className=\"mt-5\">\n              <Col xs={12}>\n                <Button\n                  style={{\n                    width: \"100%\",\n                    background: \"linear-gradient(to right, #fb7b4a, #ee3344)\",\n                  }}\n                  type=\"submit\"\n                >\n                  Reset Password\n                </Button>\n              </Col>\n            </Row>\n          </Form>\n        </div>\n      </div>\n      {error.status && <GlobalToast variant=\"danger\" message={error.message} />}\n    </div>\n  );\n};\n\nexport default ResetPassword;\n"],"sourceRoot":""}